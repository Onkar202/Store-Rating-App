{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\A-Users\\\\Desktop\\\\Store Rating App\\\\frontend\\\\src\\\\components\\\\NormalStoreList\\\\NormalStoreList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NormalStoreList = () => {\n  _s();\n  const [userId, setUserId] = useState(null);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    // Fetch the current user ID when the component mounts\n    fetchCurrentUserId();\n  }, []);\n  const fetchCurrentUserId = async () => {\n    try {\n      const token = localStorage.getItem('token'); // Retrieve the token from localStorage\n\n      if (!token) {\n        setError('No token found. Please log in.');\n        return;\n      }\n      const response = await fetch('http://localhost:5000/current-user-id', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          // Include the token in the Authorization header\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUserId(data.userId); // Assuming data contains userId\n        console.log('Authenticated user ID:', data.userId);\n      } else {\n        setError(data.message || 'Failed to fetch user ID');\n        console.error('Failed to fetch user ID:', data.message);\n      }\n    } catch (error) {\n      console.error('Error during fetch:', error);\n      setError('An error occurred while fetching user ID.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 23\n    }, this), userId && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(NormalStoreList, \"HGwr62H95MaVa1R/aXYlmD2stF4=\");\n_c = NormalStoreList;\nexport default NormalStoreList;\nvar _c;\n$RefreshReg$(_c, \"NormalStoreList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","NormalStoreList","_s","userId","setUserId","error","setError","fetchCurrentUserId","token","localStorage","getItem","response","fetch","method","headers","data","json","ok","console","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/A-Users/Desktop/Store Rating App/frontend/src/components/NormalStoreList/NormalStoreList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst NormalStoreList = () => {\r\n    const [userId, setUserId] = useState(null);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Fetch the current user ID when the component mounts\r\n        fetchCurrentUserId();\r\n    }, []);\r\n\r\n    const fetchCurrentUserId = async () => {\r\n        try {\r\n            const token = localStorage.getItem('token'); // Retrieve the token from localStorage\r\n\r\n            if (!token) {\r\n                setError('No token found. Please log in.');\r\n                return;\r\n            }\r\n\r\n            const response = await fetch('http://localhost:5000/current-user-id', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Include the token in the Authorization header\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                setUserId(data.userId); // Assuming data contains userId\r\n                console.log('Authenticated user ID:', data.userId);\r\n            } else {\r\n                setError(data.message || 'Failed to fetch user ID');\r\n                console.error('Failed to fetch user ID:', data.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during fetch:', error);\r\n            setError('An error occurred while fetching user ID.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {error && <p>{error}</p>}\r\n            {userId && <p>User ID: {userId}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NormalStoreList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZ;IACAU,kBAAkB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;MAE7C,IAAI,CAACF,KAAK,EAAE;QACRF,QAAQ,CAAC,gCAAgC,CAAC;QAC1C;MACJ;MAEA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QAClEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,eAAe,EAAE,UAAUN,KAAK,EAAE;UAAE;UACpC,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,MAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAIL,QAAQ,CAACM,EAAE,EAAE;QACbb,SAAS,CAACW,IAAI,CAACZ,MAAM,CAAC,CAAC,CAAC;QACxBe,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEJ,IAAI,CAACZ,MAAM,CAAC;MACtD,CAAC,MAAM;QACHG,QAAQ,CAACS,IAAI,CAACK,OAAO,IAAI,yBAAyB,CAAC;QACnDF,OAAO,CAACb,KAAK,CAAC,0BAA0B,EAAEU,IAAI,CAACK,OAAO,CAAC;MAC3D;IACJ,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZa,OAAO,CAACb,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CC,QAAQ,CAAC,2CAA2C,CAAC;IACzD;EACJ,CAAC;EAED,oBACIN,OAAA;IAAAqB,QAAA,GACKhB,KAAK,iBAAIL,OAAA;MAAAqB,QAAA,EAAIhB;IAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBtB,MAAM,iBAAIH,OAAA;MAAAqB,QAAA,GAAG,WAAS,EAAClB,MAAM;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEd,CAAC;AAACvB,EAAA,CA/CID,eAAe;AAAAyB,EAAA,GAAfzB,eAAe;AAiDrB,eAAeA,eAAe;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}