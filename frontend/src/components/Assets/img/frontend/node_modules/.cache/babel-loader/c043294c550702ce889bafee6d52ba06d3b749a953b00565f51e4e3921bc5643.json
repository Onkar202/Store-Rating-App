{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst NormalStoreList = () => {\n  _s();\n  const [allStore, setAllStore] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [userRatings, setUserRatings] = useState({});\n  const [currentUserId, setCurrentUserId] = useState(null);\n\n  // Function to fetch the current user ID\n  const fetchCurrentUserId = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/current-user-id\", {\n        withCredentials: true\n      });\n      if (response.data.userId) {\n        setCurrentUserId(response.data.userId);\n      }\n    } catch (error) {\n      console.error(\"Error fetching current user ID:\", error);\n    }\n  };\n\n  // Function to fetch stores from the API\n  const fetchStores = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/stores\"); // Make a GET request to /stores endpoint\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.statusText}`);\n      }\n      const data = await response.json(); // Parse the JSON data from the response\n      setAllStore(data); // Update the state with the fetched store data\n\n      // Initialize ratings with user's existing ratings if any\n      const existingRatings = {};\n      data.forEach(store => {\n        existingRatings[store._id] = store.userRatings[currentUserId] || 0; // Default to 0 if no rating\n      });\n      setUserRatings(existingRatings);\n    } catch (error) {\n      console.error(\"Error fetching stores:\", error);\n    }\n  };\n\n  // Fetch current user ID and stores when the component mounts\n  useEffect(() => {\n    fetchCurrentUserId().then(() => fetchStores());\n  }, []);\n  const handleRatingChange = (storeId, rating) => {\n    setUserRatings(prevRatings => ({\n      ...prevRatings,\n      [storeId]: rating\n    }));\n  };\n  const handleSubmitRating = async storeId => {\n    try {\n      await axios.post(`http://localhost:5000/api/stores/${storeId}/rating`, {\n        rating: userRatings[storeId]\n      }, {\n        withCredentials: true\n      }); // Include credentials to use session-based authentication\n      fetchStores(); // Refresh the store data to reflect the new rating\n    } catch (error) {\n      console.error(\"Error submitting rating:\", error);\n    }\n  };\n\n  // Filter stores based on the filter input\n  const filteredStores = allStore.filter(store => store.name.toLowerCase().includes(filter.toLowerCase()) || store.email.toLowerCase().includes(filter.toLowerCase()) || store.address.toLowerCase().includes(filter.toLowerCase()));\n  return (\n    // <div className=\"store-container\">\n    //   <input\n    //     type=\"text\"\n    //     placeholder=\"Filter by name, email, or address\"\n    //     value={filter}\n    //     onChange={(e) => setFilter(e.target.value)}\n    //     className=\"filter-input\"\n    //   />\n    //   <table>\n    //     <thead>\n    //       <tr className=\"store-header\">\n    //         <th>Image</th>\n    //         <th>Name</th>\n    //         <th>Email</th>\n    //         <th>Address</th>\n    //         <th>Overall Rating</th>\n    //         <th>Your Rating</th>\n    //         <th>Submit/Update Rating</th>\n    //       </tr>\n    //     </thead>\n    //     <tbody>\n    //       {filteredStores.length > 0 ? (\n    //         filteredStores.map((store) => (\n    //           <tr key={store._id} className=\"store-item\">\n    //             <td><img src={store.image} alt={store.name} /></td>\n    //             <td>{store.name}</td>\n    //             <td>{store.email}</td>\n    //             <td>{store.address}</td>\n    //             <td>{store.rating_count > 0 ? (store.rating / store.rating_count).toFixed(1) : \"No rating\"}</td>\n    //             <td>\n    //               {currentUserId ? (\n    //                 <span>{userRatings[currentUserId] || \"No rating\"}</span>\n    //               ) : (\n    //                 <span>Loading...</span>\n    //               )}\n    //             </td>\n    //             <td>\n    //               <select\n    //                 value={userRatings[currentUserId] || 0}\n    //                 onChange={(e) => handleRatingChange(currentUserId, parseInt(e.target.value))}\n    //               >\n    //                 <option value=\"0\">Rate...</option>\n    //                 {[1, 2, 3, 4, 5].map(value => (\n    //                   <option key={value} value={value}>{value}</option>\n    //                 ))}\n    //               </select>\n    //               <button onClick={() => handleSubmitRating(store._id)}>\n    //                 Submit/Update Rating\n    //               </button>\n    //             </td>\n    //           </tr>\n    //         ))\n    //       ) : (\n    //         <tr>\n    //           <td colSpan=\"7\">No stores available</td>\n    //         </tr>\n    //       )}\n    //     </tbody>\n    //   </table>\n    // </div>\n    {\n      currentUserId\n    }\n  );\n};\n_s(NormalStoreList, \"I88q4ny6d0/Cj5UzM3F7ggT6ZJg=\");\n_c = NormalStoreList;\nexport default NormalStoreList;\nvar _c;\n$RefreshReg$(_c, \"NormalStoreList\");","map":{"version":3,"names":["React","useState","useEffect","axios","NormalStoreList","_s","allStore","setAllStore","filter","setFilter","userRatings","setUserRatings","currentUserId","setCurrentUserId","fetchCurrentUserId","response","get","withCredentials","data","userId","error","console","fetchStores","fetch","ok","Error","statusText","json","existingRatings","forEach","store","_id","then","handleRatingChange","storeId","rating","prevRatings","handleSubmitRating","post","filteredStores","name","toLowerCase","includes","email","address","_c","$RefreshReg$"],"sources":["C:/Users/A-Users/Desktop/Store Rating App/frontend/src/components/NormalStoreList/NormalStoreList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst NormalStoreList = () => {\r\n  const [allStore, setAllStore] = useState([]);\r\n  const [filter, setFilter] = useState('');\r\n  const [userRatings, setUserRatings] = useState({});\r\n  const [currentUserId, setCurrentUserId] = useState(null);\r\n\r\n  // Function to fetch the current user ID\r\n  const fetchCurrentUserId = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/current-user-id\", { withCredentials: true });\r\n      if (response.data.userId) {\r\n        setCurrentUserId(response.data.userId);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching current user ID:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to fetch stores from the API\r\n  const fetchStores = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/stores\"); // Make a GET request to /stores endpoint\r\n      if (!response.ok) {\r\n        throw new Error(`Network response was not ok: ${response.statusText}`);\r\n      }\r\n      const data = await response.json(); // Parse the JSON data from the response\r\n      setAllStore(data); // Update the state with the fetched store data\r\n\r\n      // Initialize ratings with user's existing ratings if any\r\n      const existingRatings = {};\r\n      data.forEach(store => {\r\n        existingRatings[store._id] = store.userRatings[currentUserId] || 0; // Default to 0 if no rating\r\n      });\r\n      setUserRatings(existingRatings);\r\n    } catch (error) {\r\n      console.error(\"Error fetching stores:\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch current user ID and stores when the component mounts\r\n  useEffect(() => {\r\n    fetchCurrentUserId().then(() => fetchStores());\r\n  }, []);\r\n\r\n  const handleRatingChange = (storeId, rating) => {\r\n    setUserRatings(prevRatings => ({\r\n      ...prevRatings,\r\n      [storeId]: rating\r\n    }));\r\n  };\r\n\r\n  const handleSubmitRating = async (storeId) => {\r\n    try {\r\n      await axios.post(`http://localhost:5000/api/stores/${storeId}/rating`, {\r\n        rating: userRatings[storeId]\r\n      }, { withCredentials: true }); // Include credentials to use session-based authentication\r\n      fetchStores(); // Refresh the store data to reflect the new rating\r\n    } catch (error) {\r\n      console.error(\"Error submitting rating:\", error);\r\n    }\r\n  };\r\n\r\n  // Filter stores based on the filter input\r\n  const filteredStores = allStore.filter(store =>\r\n    store.name.toLowerCase().includes(filter.toLowerCase()) ||\r\n    store.email.toLowerCase().includes(filter.toLowerCase()) ||\r\n    store.address.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    // <div className=\"store-container\">\r\n    //   <input\r\n    //     type=\"text\"\r\n    //     placeholder=\"Filter by name, email, or address\"\r\n    //     value={filter}\r\n    //     onChange={(e) => setFilter(e.target.value)}\r\n    //     className=\"filter-input\"\r\n    //   />\r\n    //   <table>\r\n    //     <thead>\r\n    //       <tr className=\"store-header\">\r\n    //         <th>Image</th>\r\n    //         <th>Name</th>\r\n    //         <th>Email</th>\r\n    //         <th>Address</th>\r\n    //         <th>Overall Rating</th>\r\n    //         <th>Your Rating</th>\r\n    //         <th>Submit/Update Rating</th>\r\n    //       </tr>\r\n    //     </thead>\r\n    //     <tbody>\r\n    //       {filteredStores.length > 0 ? (\r\n    //         filteredStores.map((store) => (\r\n    //           <tr key={store._id} className=\"store-item\">\r\n    //             <td><img src={store.image} alt={store.name} /></td>\r\n    //             <td>{store.name}</td>\r\n    //             <td>{store.email}</td>\r\n    //             <td>{store.address}</td>\r\n    //             <td>{store.rating_count > 0 ? (store.rating / store.rating_count).toFixed(1) : \"No rating\"}</td>\r\n    //             <td>\r\n    //               {currentUserId ? (\r\n    //                 <span>{userRatings[currentUserId] || \"No rating\"}</span>\r\n    //               ) : (\r\n    //                 <span>Loading...</span>\r\n    //               )}\r\n    //             </td>\r\n    //             <td>\r\n    //               <select\r\n    //                 value={userRatings[currentUserId] || 0}\r\n    //                 onChange={(e) => handleRatingChange(currentUserId, parseInt(e.target.value))}\r\n    //               >\r\n    //                 <option value=\"0\">Rate...</option>\r\n    //                 {[1, 2, 3, 4, 5].map(value => (\r\n    //                   <option key={value} value={value}>{value}</option>\r\n    //                 ))}\r\n    //               </select>\r\n    //               <button onClick={() => handleSubmitRating(store._id)}>\r\n    //                 Submit/Update Rating\r\n    //               </button>\r\n    //             </td>\r\n    //           </tr>\r\n    //         ))\r\n    //       ) : (\r\n    //         <tr>\r\n    //           <td colSpan=\"7\">No stores available</td>\r\n    //         </tr>\r\n    //       )}\r\n    //     </tbody>\r\n    //   </table>\r\n    // </div>\r\n    {currentUserId}\r\n  );\r\n};\r\n\r\nexport default NormalStoreList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}